// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Shooter.h"
#include "../Robotmap.h"
#include "../Commands/ShootDisk.h"
#include "Math.h"
Shooter::Shooter() : PIDSubsystem("Shooter", SHOOTER_P, SHOOTER_I, SHOOTER_D) {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	diskPusher = RobotMap::shooterDiskPusher;
	shooterEncoder = RobotMap::shooterShooterEncoder;
	shooterTalon1 = RobotMap::shooterShooterTalon1;
	shooterTalon2 = RobotMap::shooterShooterTalon2;
	pusherStopSwitch = RobotMap::shooterPusherStopSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Shooter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new ShootDisk());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetWheelSpeed(float speed)
{
	
	/*		Unneeded Code
	if(speed < 0.0f)
	{
		// does not allow speed to be negative -> Doesn't allow robot to go backwards.
		speed = 0.0f;
		printf("******   DO NOT INPUT NEGATIVE SPEED!!!\n");
	}
	else if(speed > 1.0f)
	{
		// Max speed is one. If it is larger, sets it to 1.0
		speed = 1.0f;
		printf("******	Keep speed input between 0.0 and 1.0.\n");
	}
		*/
	shooterTalon1->Set(speed);
	shooterTalon2->Set(speed);

}
double Shooter::ReturnPIDInput()
{
	
	return shooterEncoder->GetPeriod();
	
}
void Shooter::UsePIDOutput(double output)
{
	SetWheelSpeed(output);
}
void Shooter::SetSpeed(double speed)
{
	SetSetpoint(speed);
	Enable();
}
bool Shooter::AtSetpoint()
{
	return fabs(GetPosition() - GetSetpoint()) < SHOOTER_THRESHOLD;
}
void Shooter::Stop()
{
	Disable();
	shooterTalon1->Set(0.0);
	shooterTalon2->Set(0.0);
}

